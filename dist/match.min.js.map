{"version":3,"sources":["../match.es6"],"names":[],"mappings":"ksBAiBgB,wBAA6B,mBAAQ,GAAK,CAAC,CAAC,GAAD,GAAD,CAAkB,CAAC,KAAD,GAAlB,CAAyC,CAAC,KAAD,GAAzC,CAAL,CAAR,CAAD,CACxC,oBAAiB,WAAmB,4EAChC,MAAO,CACH,EAAI,IAAJ,CAAS,sCAAe,GAAK,IAAL,OAAf,CAAT,GAA2D,EAAG,GAAW,UAAM,CAAE,KAAM,IAAI,MAAJ,CAAU,qBAAV,CAAmC,CAA/D,CADxD,EAEL,CAFK,EAEF,KAFE,CAEI,IAFJ,GAGV,CAJD,CADwC,CAA5B,CAAD,CAMZ,kBAAO,aAAe,MAAtB,CANY,CAMiB,kBAAM,aAAc,SAApB,CANjB,CAM+C,oBAN/C,CAM2D,aAAyB,YAC/F,MAAO,aAAmB,SAAnB,CACH,EAAQ,KAAR,CAAc,IAAd,GADG,CACyB,EAAQ,MAAR,EAAkB,EAAK,MAAvB,EAAiC,EAAQ,KAAR,CAAc,oBAAU,aAAa,SAAb,CAAwB,EAAE,IAAF,GAAa,IAAb,CAAxB,CAAgD,IAAM,IAAhE,CAAd,CACpE,CATc,C","file":"match.min.js","sourcesContent":["// const matchPns = function (pattern, args) {\r\n//     return pattern instanceof Function ?\r\n//         pattern.apply(this, args) : pattern.length == args.length && pattern.every((p, i) => p instanceof Function ? p.call(this, args[i]) : p === args[i]);\r\n// };\r\n\r\n// const matchFns = (fns, elseFn) => function (...args) {\r\n//     const [_, fn] = fns.find(([pattern]) => matchPns.call(this, pattern, args)) || [, elseFn || (() => { throw new Error('no matched pattern.'); })];\r\n//     return fn.apply(this, args);\r\n// }\r\n\r\n// export default matchFns([\r\n//     [[fns => fns instanceof Array], matchFns],\r\n//     [[fns => fns instanceof Array, elseFn => elseFn instanceof Function], matchFns],\r\n//     [[() => true, args => args instanceof Array], matchPns],\r\n// ])\r\n\r\n// lambda.\r\nexport default ((isArr, isFn, any, mPns) => (mFns => mFns([[[isArr], mFns], [[isArr, isFn], mFns], [[any, isArr], mPns]]))(\r\n    (fns, elseFn) => function (...args) {\r\n        return (\r\n            fns.find(([pattern]) => mPns.call(this, pattern, args)) || [, elseFn || (() => { throw new Error('no matched pattern.'); })]\r\n        )[1].apply(this, args);\r\n    }\r\n))(arr => arr instanceof Array, fn => fn instanceof Function, () => true, function (pattern, args) {\r\n    return pattern instanceof Function ?\r\n        pattern.apply(this, args) : pattern.length == args.length && pattern.every((p, i) => p instanceof Function ? p.call(this, args[i]) : p === args[i]);\r\n});\r\n"]}