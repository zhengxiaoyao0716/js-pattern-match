{"version":3,"sources":["../src/match.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;kBACgB,UAAC,KAAD,EAAQ,IAAR,EAAc,GAAd,EAAmB,IAAnB;AAAA,WAA6B;AAAA,eAAQ,KAAK,CAAC,CAAC,CAAC,KAAD,CAAD,EAAU,IAAV,CAAD,EAAkB,CAAC,CAAC,KAAD,EAAQ,IAAR,CAAD,EAAgB,IAAhB,CAAlB,EAAyC,CAAC,CAAC,GAAD,EAAM,KAAN,CAAD,EAAe,IAAf,CAAzC,CAAL,CAAR;AAAA,KAAD,CACxC,UAAC,GAAD,EAAM,MAAN;AAAA,eAAiB,YAAmB;AAAA;;AAAA,8CAAN,IAAM;AAAN,oBAAM;AAAA;;AAChC,mBAAO,CACH,oBAAW,GAAX,EAAgB;AAAA;AAAA,oBAAE,OAAF;;AAAA,uBAAe,KAAK,IAAL,QAAgB,OAAhB,EAAyB,IAAzB,CAAf;AAAA,aAAhB,KAAkE,GAAG,UAAW,YAAM;AAAE,sBAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AAAyC,aAA/D,CAD/D,EAEL,CAFK,EAEF,KAFE,CAEI,IAFJ,EAEU,IAFV,CAAP;AAGH,SAJD;AAAA,KADwC,CAA5B;AAAA,CAAD,CAMZ;AAAA,WAAO,eAAe,KAAtB;AAAA,CANY,EAMiB;AAAA,WAAM,cAAc,QAApB;AAAA,CANjB,EAM+C;AAAA,WAAM,IAAN;AAAA,CAN/C,EAM2D,UAAU,OAAV,EAAmB,IAAnB,EAAyB;AAAA;;AAC/F,WAAO,mBAAmB,QAAnB,GACH,QAAQ,KAAR,CAAc,IAAd,EAAoB,IAApB,CADG,GACyB,QAAQ,MAAR,IAAkB,KAAK,MAAvB,IAAiC,QAAQ,KAAR,CAAc,UAAC,CAAD,EAAI,CAAJ;AAAA,eAAU,aAAa,QAAb,GAAwB,EAAE,IAAF,SAAa,KAAK,CAAL,CAAb,CAAxB,GAAgD,MAAM,KAAK,CAAL,CAAhE;AAAA,KAAd,CADjE;AAEH,CATc,C","file":"match.js","sourcesContent":["// const matchPns = function (pattern, args) {\r\n//     return pattern instanceof Function ?\r\n//         pattern.apply(this, args) : pattern.length == args.length && pattern.every((p, i) => p instanceof Function ? p.call(this, args[i]) : p === args[i]);\r\n// };\r\n\r\n// const matchFns = (fns, elseFn) => function (...args) {\r\n//     const [_, fn] = Array.find(fns, ([pattern]) => matchPns.call(this, pattern, args)) || [, elseFn || (() => { throw new Error('no matched pattern.'); })];\r\n//     return fn.apply(this, args);\r\n// }\r\n\r\n// export default matchFns([\r\n//     [[fns => fns instanceof Array], matchFns],\r\n//     [[fns => fns instanceof Array, elseFn => elseFn instanceof Function], matchFns],\r\n//     [[() => true, args => args instanceof Array], matchPns],\r\n// ])\r\n\r\n// lambda.\r\nexport default ((isArr, isFn, any, mPns) => (mFns => mFns([[[isArr], mFns], [[isArr, isFn], mFns], [[any, isArr], mPns]]))(\r\n    (fns, elseFn) => function (...args) {\r\n        return (\r\n            Array.find(fns, ([pattern]) => mPns.call(this, pattern, args)) || [, elseFn || (() => { throw new Error('no matched pattern.'); })]\r\n        )[1].apply(this, args);\r\n    }\r\n))(arr => arr instanceof Array, fn => fn instanceof Function, () => true, function (pattern, args) {\r\n    return pattern instanceof Function ?\r\n        pattern.apply(this, args) : pattern.length == args.length && pattern.every((p, i) => p instanceof Function ? p.call(this, args[i]) : p === args[i]);\r\n});\r\n"]}